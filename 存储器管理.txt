
存储器管理


操作系统的职能之一，主要任务是为多道程序的运行提供良好的环境，方便用户使用存储器，提高存储器的利用率以及能从逻辑上扩充内存。主要功能：
 
1、内存分配
 
2、内存保护
 
3、地址映射
 
4、内存扩充

计算机存储器管理中内存分配方式，由连续分配方式发展到离散分配方式，以适应不同的系统需求，离散分配方式是虚拟存储的基础，实现方式依赖于页面置换算法。




一、程序的装入和链接

任何可执行程序都需要进过三个步骤：编译（编译成若干个以.obj结尾的目标模块（Object Module））；链接（将一组目标模块和它们所需要的库函数链接在一起，形成完整的装入模块（Load Module））；装入（由装入程序（Loader）将装入模块装入内存）。

程序的链接也可分为三种方式：

1、静态链接；

2、装入时动态链接；

3、运行时动态链接；

其中，动态链接方式是近几年流行起来的一种连接方式，它可以使得在程序执行时未用到的目标模块不会被调入内存和被链接到装入模块上，这样不仅可加快程序的装入过程，而其可节省大量的内存空间。

程序的装入可分为三种方式：

1、绝对装入方式（Absulut Loading Mode）；

2、可重定位装入方式（Relocation Loading Mode）；

3、动态运行时装入方式（Dynamic Run-time Loading）；

其中，第三种，动态运行时装入方式，需要一个重定位寄存器，用以存放程序（数据）在内存中的起始地址。程序在执行时，真正访问的内存物理地址是相对地址（装入内存时所有内存仍然是相对地址）与重定位寄存器中的起始地址相加而形成的。




二、三种内存分配方式

程序一旦链接成功，当要运行时，就需要在内存中开辟一块空间，以容纳这个程序。没有那个程序能够在外存（硬盘）上执行。

内存为程序分配空间有四种分配方式：

1、连续分配方式；

2、基本分页存储管理方式；

3、基本分段存储管理方式；

4、段页式存储管理方式；




1、连续分配方式：可细分为四种：固定分区分配、固定分区分配、动态分区分配和动态重定位分区分配。




2、基本分页存储管理方式:

    连续分配方式会形成许多“碎片”，虽然可以通过“紧凑”方式将许多碎片拼接成可用的大块空间，但须为之付出很大开销。所以提出了“离散分配方式”的想法。如果离散分配的基本单位是页，则称为分页管理方式；如果离散分配的基本单位是段，则称为分段管理方式。

    在分页系统中，允许将进程的各个页离散地存储在内存不同的物理块中，但系统应能保证进程的正确运行，即能在内存中找到每个页面所对应的物理块。为此，系统又为每个进程建立了一张页面映像表，简称页表。在进程地址空间内的所有页，依次在页表中有一页表项，其中记录了相应页在内存中对应的物理块号。在配置了页表后，进程执行时，通过查找该表，即可找到每页在内存中的物理块号。可见，页表的作用是实现从页号到物理块号的地址映射。为了能够将用户地址空间中的逻辑地址，变换为内存空间中的物理地址，在系统中必须设置地址变换机构。地址变换任务是借助于页表来完成的。

(分页逻辑地址结构：20页号+12位位移量。12位位移量即页内地址，不同机器位数不一样，12位为4KB，即页面大小为4KB，注意逻辑页和物理块大小是相等的，即其相应的一个内存块也是4KB，在地址变换时无需转换了。地址变换：由逻辑地址（放在有效地址寄存器）中的页号到页表中可查询到页号对应的内存中的物理块号（放入物理地址寄存器），然后将逻辑地址中的页内地址送入物理地址寄存器的块内地址字段中，这样就完成逻辑地址到物理地址的变换)

    由于页表是存放在内存中的，这使得CPU在每存取一个数据时，都要两次访问内存。为了提高地址变换速度，在地址变化机构中增设了一个具有并行查询能力的告诉缓冲寄存器，又称为“联想寄存器”（Associative Lookaside Buffer）；

    在单级页表的基础上，为了适应非常大的逻辑地址空间，出现了两级和多级页表，但是，他们的原理和单级页表是一样的，只不过为了适应地址变换层次的增加，需要在地址变换机构中增设外层的页表寄存器。




3、基本分段存储管理方式

分段存储管理方式的目的，主要是为了满足用户（程序员）在编程和使用上多方面的要求，其中有些要求是其他几种存储管理方式所难以满足的。因此，这种存储管理方式已成为当今所有存储管理方式的基础。

（1）方便编程；

（2）信息共享：分页系统中的“页”只是存放信息的物理单位（块），并无完整的意义，不便于实现共享；然而段却是信息的逻辑单位。由此可知，为了实现段的共享，希望存储器管理能与用户程序分段的组织方式相适应。

（3）信息保护；

（4）动态增长；

（5）动态链接。

分段管理方式和分页管理方式在实现思路上是很相似的，分段中地址是：16位段号(段名)+16位段内地址。地址变换过程：由有效地址中段号查询段表得到段基址+有效地址中段内地址（注意分页存储的地址变换中不需加）得到物理地址




分页和分段的主要区别：

1、两者相似之处：两者都采用离散分配方式，且都要通过地址映射机构来实现地址变换。

2、两者不同之处：

（1）页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率。或者说，分页仅仅是由于系统管理的需要而不是用户的需要。段则是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好地满足用户的需要。

（2）页的大小固定且由系统决定，而段的长度却不固定。

（3）分页的作业地址空间是一维的，即单一的线性地址空间；而分段的作业地址空间则是二维的（因为一个作业的地址空间分成多个不同的段）。




4、段页式存储管理方式

前面所介绍的分页和分段存储管理方式都各有优缺点。分页系统能有效地提高内存利用率，而分段系统则能很好地满足用户需求。我们希望能够把两者的优点结合，于是出现了段页式存储管理方式。

段页式系统的基本原理，是分段和分页原理的结合，即先将用户程序分成若干个段，再把每个段分成若干个页，并为每一个段赋予一个段名。在段页式系统中，地址结构由段号、段内页号和页内地址三部分所组成。

和前两种存储管理方式相同，段页式存储管理方式同样需要增设联想寄存器。




三、虚拟存储器

前面介绍的各种存储器管理方式，有一个共同的特点：即它们都需要将一个作业全部装入内存后方能运行。然而，当一个作业很大，或者有大量作业要求运行时，这些管理方式显然不能胜任了。因为从硬件上增加内存容量毕竟有限，所以我们从逻辑上扩充内存容量，这正是虚拟存储技术所要解决的问题。

所谓虚拟存储器，是指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统。

虚拟存储器是基于程序的局部性原理。某段时间内程序将呈现局部性规律，相应的，它所访问的存储空间也局限于某个区域。所以，我们可以只讲这部分调入物理内存，而将其他暂不使用的部分放到虚拟存储器上。

虚拟存储器的特征：

1、多次性：多次性是虚拟存储器最重要的特征，任何其他的存储管理方式，都不具有这一特征。因此，我们可以认为虚拟存储器是具有多次性特征的存储器系统

2、对换性；

3、虚拟性；

值得说明的是，虚拟性是以多次性和对唤性为基础的，或者说，仅当系统允许将作业分多次调入内存，并能将内存中暂时不运行的程序和数据换至盘上时，才有可能实现虚拟存储器；而多次性和对换性，又必须建立在离散分配的基础上。

 

虚拟存储器的实现有两种方式：

1、分页请求系统；

2、分段请求系统。




请求分页存储管理方式：

请求分页系统是建立在基本分页基础上的，为了能支持虚拟存储器功能而增加了请求调页功能和页面置换功能。请求分页是目前最常用的一种实现虚拟存储器的方式。

 

缺页中断机构：

在请求分页系统中，每当所要访问的页面不在内存时，便产生一缺页中断，请求OS将所缺之页调入内存。缺页中断作为中断，它们同样需要经历诸如保护CPU环境、分析中断原因、转入缺页中断处理程序进行处理、恢复CPU环境等几个步骤。但缺页中断又是一种特殊的中断，它与一般的中断相比，有着明显的区别，主要表现在下面两个方面：

（1）在指令执行期间产生和处理中断信号。

（2）一条指令在执行期间，可能产生多次缺页中断。

 

页面置换算法：

1、最佳（Optimal）置换算法

该算法无法实现，但可以利用该算法去评价其他算法。

2、先进先出（FIFO）页面置换算法

3、最近最久未使用（LRU）置换算法。

4、Clock置换算法：

LRU算法是较好的一种算法，但由于它要求有较多的硬件支持，故在实际应用中，大多采用LRU的近似算法。Clock算法就是用得较多的一种LRU近似算法。

5、最少使用（LFU）置换算法。

6、页面缓冲算法（PBA：Page Buffering Algorithm）。

所有的算法都有各自的优缺点，我们只能在特定的场合下谈论它们的可使用情况，这里也体现了我在这篇文章中想要强调的辨证观：算法的好坏只有放到具体的应用场合下才可以体现出来。

 

请求分段存储管理方式。

分段存储管理方式和分页请求管理方式雷同，这里不再赘述，但是分段更容易实现数据和程序段的共享和保护。
